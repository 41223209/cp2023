var tipuesearch = {"pages": [{'title': 'About', 'text': ' https://github.com/mdecycu/cmsite \n', 'tags': '', 'url': 'About.html'}, {'title': 'w5', 'text': '// 包含標準輸出入程式庫的標頭文件\n// https://blog.csdn.net/weixin_38468077/article/details/101069365\n// http://www.gnuplot.info/demo/\n// https://github.com/sysprog21/rv32emu\n// https://github.com/sysprog21/semu \n// https://docs.google.com/presentation/d/14N0cWG2SnBSqhc2cLF0_2VerB9FF8JN3\n// https://cs61c.org/fa23/\n// https://greenteapress.com/wp/think-python-2e/\n// https://github.com/ecalvadi/c99-examples\n// https://github.com/gouravthakur39/beginners-C-program-examples\n// https://github.com/ergenekonyigit/Numerical-Analysis-Examples\n// https://www.che.ncku.edu.tw/facultyweb/changct/html/teaching/CPPandMATLAB/Past/pdf%20Files/Chap02-Ling.pdf\n// https://gteceducation.com.sg/Brochures/PROGRAMMING/C%20PROGRAMMING%20FULL.pdf\n// https://jsommers.github.io/cbook/cbook.pdf\n// https://jsommers.github.io/cbook/index.html\n// http://student.itee.uq.edu.au/courses/csse2310/CProgrammingNotes.pdf\n// http://cslibrary.stanford.edu/101/EssentialC.pdf\n// https://publications.gbdirect.co.uk/c_book/\n// https://www.fossil-scm.org/fossil-book/doc/2ndEdition/fossilbook.pdf\n// ***** execute on replit \n// cd downloads\n// cc gnuplot_ex1.c -o gnuplot_ex1\n// ./gnuplot_ex1\n#include <stdio.h>\n  \n// 主函式\nint main() {\n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n  \n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal png font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'./../images/gnuplot_ex1.png\'\\n");\n    fprintf(gnuplotPipe, "plot sin(x)");\n    // Close popen\n    pclose(gnuplotPipe);\n  \n    return 0;\n} \n clear \n cd downloads \n cc gnuplot_ex1.c \n ./a.out \n \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue);\n\nint main() {\n// width 3: height 2\nint width = 1200;\nint height = (int)(width*2.0 / 3.0);\n\ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\n\ndraw_roc_flag(img);\n\nFILE *outputFile = fopen("./roc_flag.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "Error opening the output file.\\n");\nreturn 1;\n}\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\nreturn 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\nint red, white, blue;\nint center_x = (int)(width/4);\nint center_y = (int)(height/4);\nint sun_radius = (int)(width/8);\n\n// Colors for the flag\nred = gdImageColorAllocate(img, 242, 0, 0); // Red color\nwhite = gdImageColorAllocate(img, 255, 255, 255); // White stripes\nblue = gdImageColorAllocate(img, 0, 41, 204); // Blue\n\n// 繪製紅色矩形區域\ngdImageFilledRectangle(img, 0, 0, width, height, red);\n\n// 繪製藍色矩形區域\ngdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n\n// 繪製太陽\ndraw_white_sun(img, center_x, center_y, sun_radius, white, red, blue);\n}\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue) {\nfloat angle = 0;\nint numRays = 12; // 光芒的數量\n\ngdPoint points[3]; // 三個頂點的陣列\n\nfor (int i = 0; i < numRays; i++) {\nangle = i * (2 * M_PI / numRays);\nfloat x1 = center_x + cos(angle) * sun_radius;\nfloat y1 = center_y + sin(angle) * sun_radius;\n\n// 調整兩個底邊頂點的位置\nfloat x2 = center_x + cos(angle + 0.35) * (sun_radius * 0.5);\nfloat y2 = center_y + sin(angle + 0.35) * (sun_radius * 0.5);\nfloat x3 = center_x + cos(angle - 0.35) * (sun_radius * 0.5);\nfloat y3 = center_y + sin(angle - 0.35) * (sun_radius * 0.5);\n\n// 設定多邊形的三個頂點\npoints[0].x = (int)x1;\npoints[0].y = (int)y1;\npoints[1].x = (int)x2;\npoints[1].y = (int)y2;\npoints[2].x = (int)x3;\npoints[2].y = (int)y3;\n\ngdImageFilledPolygon(img, points, 3, white);\n}\n//外圈\ngdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.2, sun_radius * 1.2, blue);\n\n// 繪製太陽內部\ngdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.1, sun_radius * 1.1, white);\n}\n \n', 'tags': '', 'url': 'w5.html'}, {'title': 'w6', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_roc_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue);\n\nint main() {\n// width 3: height 2\nint width = 1200;\nint height = (int)(width*2.0 / 3.0);\n\ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\n\ndraw_roc_flag(img);\n\nFILE *outputFile = fopen("./roc_flag.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "Error opening the output file.\\n");\nreturn 1;\n}\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\nreturn 0;\n}\n\nvoid draw_roc_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\nint red, white, blue;\nint center_x = (int)(width/4);\nint center_y = (int)(height/4);\nint sun_radius = (int)(width/8);\n\n// Colors for the flag\nred = gdImageColorAllocate(img, 242, 0, 0); // Red color\nwhite = gdImageColorAllocate(img, 255, 255, 255); // White stripes\nblue = gdImageColorAllocate(img, 0, 41, 204); // Blue\n\n// 繪製紅色矩形區域\ngdImageFilledRectangle(img, 0, 0, width, height, red);\n\n// 繪製藍色矩形區域\ngdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n\n// 繪製太陽\ndraw_white_sun(img, center_x, center_y, sun_radius, white, red, blue);\n}\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue) {\nfloat angle = 0;\nint numRays = 12; // 光芒的數量\n\ngdPoint points[3]; // 三個頂點的陣列\n\nfor (int i = 0; i < numRays; i++) {\nangle = i * (2 * M_PI / numRays);\nfloat x1 = center_x + cos(angle) * sun_radius;\nfloat y1 = center_y + sin(angle) * sun_radius;\n\n// 調整兩個底邊頂點的位置\nfloat x2 = center_x + cos(angle + 0.35) * (sun_radius * 0.5);\nfloat y2 = center_y + sin(angle + 0.35) * (sun_radius * 0.5);\nfloat x3 = center_x + cos(angle - 0.35) * (sun_radius * 0.5);\nfloat y3 = center_y + sin(angle - 0.35) * (sun_radius * 0.5);\n\n// 設定多邊形的三個頂點\npoints[0].x = (int)x1;\npoints[0].y = (int)y1;\npoints[1].x = (int)x2;\npoints[1].y = (int)y2;\npoints[2].x = (int)x3;\npoints[2].y = (int)y3;\n\ngdImageFilledPolygon(img, points, 3, white);\n}\n//外圈\ngdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.2, sun_radius * 1.2, blue);\n\n// 繪製太陽內部\ngdImageFilledEllipse(img, center_x, center_y, sun_radius * 1.1, sun_radius * 1.1, white);\n}\n \n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_usa_flag(gdImagePtr img);\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n\nint main() {\nint width = 800;\nint height = (int)(width / 1.9);\ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\ndraw_usa_flag(img);\nFILE *outputFile = fopen("./../images/usa_flag.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "打开输出文件时出错。\\n");\nreturn 1;\n}\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\nreturn 0;\n}\nvoid draw_usa_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\nint red, white, blue;\n// 国旗颜色\nred = gdImageColorAllocate(img, 178, 34, 52); // 红色条纹\nwhite = gdImageColorAllocate(img, 255, 255, 255); // 白色条纹\nblue = gdImageColorAllocate(img, 60, 59, 110); // 蓝色矩形\nint stripe_height = height / 13;\nint stripe_width = width;\nint star_size = (int)(0.0308 * height); // 星星大小\nfor (int y = 0; y < height; y += stripe_height) {\nif (y / stripe_height % 2 == 0) {\ngdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);\n} else {\ngdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);\n}\n}\ngdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);\nint star_spacing_x = (int)(0.129 * height); // 横向星星之间的间距\nint star_spacing_y = (int)(0.054 * height); // 纵向星星之间的间距\nint star_start_x = (int)(0.125 * height); // 星星的起始X位置\nint star_start_y = (int)(0.0485 * height); // 星星的起始Y位置\nfor (int row = 0; row < 9; row++) {\nint starsPerRow = (row % 2 == 0) ? 6 : 5;\n// 计算2、4、6和8排星星的偏移量\nint offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;\nfor (int star = 0; star < starsPerRow; star++) {\nint x = star_start_x + star * star_spacing_x + offset_x;\n// 旋转角度（以弧度为单位）\ndouble rotation_angle = M_PI / 5; // 忘記多少度的旋转\nint y = star_start_y + row * star_spacing_y;\ndraw_star(img, x, y, star_size, white, rotation_angle);\n}\n}\n}\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\ngdPoint points[10];\nfor (int i = 0; i < 10; i++) {\ndouble angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;\nint radius = (i % 2 == 0) ? size : size / 2;\npoints[i].x = x + radius * cos(angle);\npoints[i].y = y + radius * sin(angle);\n}\n// 用指定的颜色填充星星\ngdImageFilledPolygon(img, points, 10, color);\n}\n \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_usa_flag(gdImagePtr img);\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n\nint main() {\nint width = 800;\nint height = (int)(width / 1.9);\ngdImagePtr img = gdImageCreateTrueColor(width, height);\ngdImageAlphaBlending(img, 0);\ndraw_usa_flag(img);\nFILE *outputFile = fopen("./../images/usa_flag.png", "wb");\nif (outputFile == NULL) {\nfprintf(stderr, "打开输出文件时出错。\\n");\nreturn 1;\n}\ngdImagePngEx(img, outputFile, 9);\nfclose(outputFile);\ngdImageDestroy(img);\nreturn 0;\n}\nvoid draw_usa_flag(gdImagePtr img) {\nint width = gdImageSX(img);\nint height = gdImageSY(img);\nint red, white, blue;\n// 国旗颜色\nred = gdImageColorAllocate(img, 178, 34, 52); // 红色条纹\nwhite = gdImageColorAllocate(img, 255, 255, 255); // 白色条纹\nblue = gdImageColorAllocate(img, 60, 59, 110); // 蓝色矩形\nint stripe_height = height / 13;\nint stripe_width = width;\nint star_size = (int)(0.0308 * height); // 星星大小\nfor (int y = 0; y < height; y += stripe_height) {\nif (y / stripe_height % 2 == 0) {\ngdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, red);\n} else {\ngdImageFilledRectangle(img, 0, y, stripe_width, y + stripe_height, white);\n}\n}\ngdImageFilledRectangle(img, 0, 0, width * 2 / 5, stripe_height * 7, blue);\nint star_spacing_x = (int)(0.129 * height); // 横向星星之间的间距\nint star_spacing_y = (int)(0.054 * height); // 纵向星星之间的间距\nint star_start_x = (int)(0.125 * height); // 星星的起始X位置\nint star_start_y = (int)(0.0485 * height); // 星星的起始Y位置\nfor (int row = 0; row < 9; row++) {\nint starsPerRow = (row % 2 == 0) ? 6 : 5;\n// 计算2、4、6和8排星星的偏移量\nint offset_x = (row % 2 == 0) ? star_spacing_x / -2 : 0;\nfor (int star = 0; star < starsPerRow; star++) {\nint x = star_start_x + star * star_spacing_x + offset_x;\n// 旋转角度（以弧度为单位）\ndouble rotation_angle = M_PI / 5; // 忘記多少度的旋转\nint y = star_start_y + row * star_spacing_y;\ndraw_star(img, x, y, star_size, white, rotation_angle);\n}\n}\n}\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\ngdPoint points[10];\nfor (int i = 0; i < 10; i++) {\ndouble angle = M_PI / 2 + i * 2 * M_PI / 10 + rotation_angle;\nint radius = (i % 2 == 0) ? size : size / 2;\npoints[i].x = x + radius * cos(angle);\npoints[i].y = y + radius * sin(angle);\n}\n// 用指定的颜色填充星星\ngdImageFilledPolygon(img, points, 10, color);\n}\n \n \n \n', 'tags': '', 'url': 'w6.html'}, {'title': 'w7', 'text': '日本國旗 \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_japan_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red );\n\nint main() {\n    // width 3: height 2\n    int width = 1200;\n    int height = 2 * width / 3;\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_japan_flag(img);\n\n    FILE *outputFile = fopen("./../images/japan_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\nvoid draw_japan_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white ;\n    int center_x =  0.5 * width;\n    int center_y =  0.5 * height;\n    int sun_radius = 145 ;\n\n    // Colors for the flag\n    red = gdImageColorAllocate(img, 242, 0, 0); // Red color\n    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes\n\n\n    // 繪製白色矩形區域\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n\n\n    // 繪製太陽內部\n    gdImageFilledEllipse(img, center_x, center_y, sun_radius * 3, sun_radius * 3, red);\n} \n \n \n \n \n 中國國旗 \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_chinese_flag(gdImagePtr img);\n\nint main() {\n    int width = 300; // 國旗寬度\n    int height = 200; // 國旗高度\n\n    gdImagePtr im = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(im, 0);\n\n    draw_chinese_flag(im);\n\n    FILE *outputFile = fopen("./../images/proc_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打开输出文件时出错。\\n");\n        return 1;\n    }\n\n    gdImagePngEx(im, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(im);\n\n    return 0;\n}\n\n// 声明 draw_star 函数\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle);\n\nvoid draw_chinese_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, yellow;\n\n    // 國旗顏色\n    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色背景\n    yellow = gdImageColorAllocate(img, 255, 255, 0); // 黃色星星\n\n    // 畫紅色背景\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n\n    // 設置星星的大小和位置\n    int star_size = (int)(0.28 * height);\n    int star_x = (int)(0.165 * width);\n    int star_y = (int)(0.265 * height);\n\n    // 畫大星星\n    draw_star(img, star_x, star_y, star_size, yellow, 11.0);\n\n    // 繪製小星星，位置根據實際國旗比例計算\n    double radius = 0.15 * height;\n    double angle = 360 / 7 * M_PI / 179.0;\n    double rotation = -M_PI / 7.5;\n    int cx = (int)(0.32 * width);\n    int cy = (int)(0.27 * height);\n\n    for (int i = -1; i < 3; i++) {\n        int x = (int)(cx + radius * cos(i * angle + rotation));\n        int y = (int)(cy + radius * sin(i * angle + rotation));\n        draw_star(img, x, y, 19, yellow, M_PI / 5.0);\n    }\n}\n\nvoid draw_star(gdImagePtr img, int x, int y, int size, int color, double rotation_angle) {\n    gdPoint points[10];\n\n    // 计算星形的五个外点和五个内点\n    double outer_radius = size / 2;\n    double inner_radius = size / 6;\n    double angle = M_PI / 5.0;\n\n    for (int i = 0; i < 10; i++) {\n        double radius = (i % 2 == 0) ? outer_radius : inner_radius;\n        double theta = rotation_angle + i * angle;\n        points[i].x = x + radius * cos(theta);\n        points[i].y = y + radius * sin(theta);\n    }\n\n    // 使用 gdImageFilledPolygon 绘制星形\n    gdImageFilledPolygon(img, points, 10, color);\n} \n \n \n 英國國旗 \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_uk_flag(gdImagePtr img);\nvoid fillTriangle(gdImagePtr img, int x1, int y1, int x2, int y2, int x3, int y3, int color);\n\nint main() {\n    // 设置国旗的宽和高\n    int width = 1200;\n    int height = width / 2;\n\n    // 创建图像\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    // 绘制英国国旗\n    draw_uk_flag(img);\n\n    // 将图像保存到文件\n    FILE *outputFile = fopen("./../images/uk_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "打开输出文件时发生错误。\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\n\n\nvoid draw_uk_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n\n    int red, white, blue;\n    red = gdImageColorAllocate(img, 204, 0, 0);       // 红色\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色\n    blue = gdImageColorAllocate(img, 0, 0, 153);      // 蓝色\n\n    gdImageFilledRectangle(img, 0, 0, width, height, blue);\n\n\n  int x1, y1, x2, y2, x3, y3;\n  {\n    int line_thickness = 100;\n    gdImageSetThickness(img, line_thickness);\n\n    int x1, y1, x2, y2, x3, y3;\n\n    // 绘制白色斜线\n    x1 = 0;\n    y1 = 600;\n    x2 = 1200;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, white);\n\n    x1 = 0;\n    y1 = 0;\n    x2 = 1200;\n    y2 = 600;\n    gdImageLine(img, x1, y1, x2, y2, white);\n}\n  {\n    int line_thickness = 33;\n    gdImageSetThickness(img, line_thickness);\n\n\n    // 绘制红色斜线\n    x1 = 566;\n    y1 = 300;\n    x2 = 1166;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, red);\n\n    x1 = 1233;\n    y1 = 600;\n    x2 = 633;\n    y2 = 300;\n    gdImageLine(img, x1, y1, x2, y2, red);\n\n    x1 = 566;\n    y1 = 300;\n    x2 = -33;\n    y2 = 0;\n    gdImageLine(img, x1, y1, x2, y2, red);\n\n    x1 = 600;\n    y1 = 316.5;\n    x2 = 0;\n    y2 = 616.5;\n    gdImageLine(img, x1, y1, x2, y2, red);\n  }\n  {\n  int line_thickness = 33;\n  gdImageSetThickness(img, line_thickness);\n\n  int x1, y1, x2, y2, x3, y3;\n\n  // 绘制  斜线\n  x1 = 0;\n  y1 = 600;\n  x2 = 1200;\n  y2 = 0;\n  gdImageLine(img, x1, y1, x2, y2, red );\n\n\n  x1 = 1200;\n    y1 = 16.5;\n    x2 = 600;\n    y2 = 316.5;\n    gdImageLine(img, x1, y1, x2, y2, white);\n\n\n  x1 = 0;\n    y1 = 583.5;\n    x2 = 600;\n    y2 = 283.5;\n    gdImageLine(img, x1, y1, x2, y2, white);\n\n\n  }\n\n    // 绘制白色十字\n    int cross_width = width / 32;\n    int cross_arm_width = width / 32;\n    int center_x = width / 2;\n    int center_y = height / 2;\n\n    gdImageFilledRectangle(img, center_x + 2.7 * cross_width, 0, center_x - 2.7 * cross_width, height, white);\n    gdImageFilledRectangle(img, 0, center_y + 2.7 * cross_arm_width, width, center_y - 2.7 * cross_arm_width, white);\n\n    // 绘制红色十字\n    gdImageFilledRectangle(img, center_x + 1.5 * cross_width, 0, center_x - 1.5 * cross_width, height, red);\n    gdImageFilledRectangle(img, 0, center_y + 1.5 * cross_arm_width, width, center_y - 1.5 * cross_arm_width, red);\n} \n \n \n 韓國國旗 \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\n#define WIDTH 900\n#define HEIGHT 600\n#define FILENAME "south_korea_flag.png"\n\nint main() {\n    gdImagePtr im;\n    FILE *pngout;\n    int white, black, red, blue;\n\n    im = gdImageCreate(WIDTH, HEIGHT);\n\n    white = gdImageColorAllocate(im, 255, 255, 255);\n    black = gdImageColorAllocate(im, 0, 0, 0);\n    red = gdImageColorAllocate(im, 205, 0, 0);\n    blue = gdImageColorAllocate(im, 0, 56, 168);\n\n    // Background (white)\n    gdImageFilledRectangle(im, 0, 0, WIDTH, HEIGHT , white);\n\n    // Blue Circle (Yin-Yang Symbol)\n    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 210, 30, red, gdArc);\n\n    // Red Circle (Yin-Yang Symbol)\n    gdImageFilledArc(im, WIDTH / 2, HEIGHT / 2, WIDTH / 3, HEIGHT / 2, 30, 210, blue, gdArc);\n\n  int circleX = 385;    // 圓心的 X 座標\n  int circleY = 262.5;   // 圓心的 Y 座標\n  int circleRadius = 75;     \n\n  // 繪製圓形\n  gdImageFilledEllipse(im, circleX, circleY, circleRadius * 2, circleRadius * 2, red);\n\n  int circleX2 = 515;    // 圓心的 X 座標\n  \n int circleY2 = 337.5;\n\n  // 繪製圓形\n  gdImageFilledEllipse(im, circleX2, circleY2, circleRadius * 2, circleRadius * 2, blue);\n  \n  {\n    \n  \n  // 起點和終點位置\n  \n  int startX = 340;    \n  // 線的起點 X 座標\n  \n  int startY = 90;   \n  // 線的起點 Y 座標\n  \n  int endX = 200;     \n  // 線的終點 X 座標\n  \n  int endY = 260;     \n  // 線的終點 Y 座標\n \n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY -10, endX -35, endY -10, black);\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY -20, endX -70, endY -20, black);\n\n  int startX2 = 213;    \n  // 線的起點 X 座標\n\n  int startY2 = 270;   \n  // 線的起點 Y 座標\n\n  int endX2 = 133;     \n  // 線的終點 X 座標\n\n  int endY2 = 210;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX2 +3, startY2, endX2 +3, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -17, startY2 +9 , endX2 -17, endY2 +9 , white);\n\n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +115, startY2 -145, endX2 +115, endY2 -145, white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 -155, endX2 +120, endY2 -155, white);\n\n  gdImageSetThickness(im, lineWidth +12);\ngdImageLine(im, startX2 +145, startY2 -155, endX2 +145, endY2 -155, white);\n}\n  {\n    // 起點和終點位置\n  \n  int startX = 330;    \n  // 線的起點 X 座標\n  \n  int startY = 520;   \n  // 線的起點 Y 座標\n  \n  int endX = 190;     \n  // 線的終點 X 座標\n  \n  int endY = 350;     \n  // 線的終點 Y 座標\n \n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);\n\n  int startX2 = 213;    \n  // 線的起點 X 座標\n\n  int startY2 = 330;   \n  // 線的起點 Y 座標\n\n  int endX2 = 133;     \n  // 線的終點 X 座標\n\n  int endY2 = 390;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);\n\n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);\n\n  gdImageSetThickness(im, lineWidth +14);\ngdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);\n\n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 232, 426, 206, 448, white);\n\n  }\n\n  {\n    // 起點和終點位置\n  \n  int startX = 564;    \n  // 線的起點 X 座標\n  \n  int startY = 520;   \n  // 線的起點 Y 座標\n  \n  int endX = 704;     \n  // 線的終點 X 座標\n  \n  int endY = 350;     \n  // 線的終點 Y 座標\n \n  int lineWidth = 23;  // 線的寬度\n    \n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +70, startY +20, endX +70, endY +20, black);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +35, startY +10, endX +35, endY +10, black);\n    \ngdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 624, 400, 734, 490, white);\n    \n  int startX2 = 553;    \n  // 線的起點 X 座標\n\n  int startY2 = 330;   \n  // 線的起點 Y 座標\n\n  int endX2 = 633;     \n  // 線的終點 X 座標\n\n  int endY2 = 390;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 +139, startY2, endX2 +139, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 +157, startY2 -9 , endX2 +157, endY2 -9 , white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +25, startY2 +155, endX2 +25, endY2 +155, white);\n\n  gdImageSetThickness(im, lineWidth +30);\ngdImageLine(im, startX2 -3, startY2 +170, endX2 , endY2 +170, white);\n  }\n  {\n    // 起點和終點位置\n  \n  int startX = 330;    \n  // 線的起點 X 座標\n  \n  int startY = 520;   \n  // 線的起點 Y 座標\n  \n  int endX = 190;     \n  // 線的終點 X 座標\n  \n  int endY = 350;     \n  // 線的終點 Y 座標\n \n  int lineWidth = 23;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -35, startY +10, endX -35, endY +10, black);\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX -70, startY +20, endX -70, endY +20, black);\n\n  int startX2 = 213;    \n  // 線的起點 X 座標\n\n  int startY2 = 330;   \n  // 線的起點 Y 座標\n\n  int endX2 = 133;     \n  // 線的終點 X 座標\n\n  int endY2 = 390;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 -11, startY2, endX2 -11, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 -30, startY2 -9 , endX2 -30, endY2 -9 , white);\n\n  gdImageSetThickness(im, lineWidth );\ngdImageLine(im, startX2 +100, startY2 +150, endX2 +100, endY2 +150, white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +120, startY2 +155, endX2 +120, endY2 +155, white);\n\n  gdImageSetThickness(im, lineWidth +14);\ngdImageLine(im, startX2 +145, startY2 +157, endX2 +145, endY2 +157, white);\n\n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 232, 426, 206, 448, white);\n\n  }\n  {\n    // 起點和終點位置\n  \n  int startX = 564;    \n  // 線的起點 X 座標\n  \n  int startY = 97;   \n  // 線的起點 Y 座標\n  \n  int endX = 704;     \n  // 線的終點 X 座標\n  \n  int endY = 267;     \n  // 線的終點 Y 座標\n \n  int lineWidth = 23;  // 線的寬度\n    \n  // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +70, startY -20, endX +70, endY -20, black);\n\n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX, startY, endX, endY, black);\n\n    gdImageSetThickness(im, lineWidth -10);\ngdImageLine(im, 624, 212, 734, 118, white);\n    \n    // 繪製線段\n  gdImageSetThickness(im, lineWidth);\n  gdImageLine(im, startX +35, startY -10, endX +35, endY -10, black);\n    \n  int startX2 = 553;    \n  // 線的起點 X 座標\n\n  int startY2 = 277;   \n  // 線的起點 Y 座標\n\n  int endX2 = 633;     \n  // 線的終點 X 座標\n\n  int endY2 = 217;     \n  // 線的終點 Y 座標\n\n  int lineWidth2 = 25;  // 線的寬度\n\n  // 繪製線段\n  gdImageSetThickness(im, lineWidth +8);\n  gdImageLine(im, startX2 +134, startY2, endX2 +134, endY2, white);\n\n  gdImageSetThickness(im, lineWidth +10);\ngdImageLine(im, startX2 +157, startY2 +9 , endX2 +157, endY2 +9 , white);\n\n  gdImageSetThickness(im, lineWidth);\ngdImageLine(im, startX2 +25, startY2 -155, endX2 +25, endY2 -155, white);\n\n    gdImageSetThickness(im, lineWidth +30);\ngdImageLine(im, startX2 -5, startY2 -155, endX2 -5, endY2 -155, white);\n\n  }\n  \n    // Save image\nFILE *outputFile = fopen("./../images/korea_flag.png", "wb");\nif (outputFile == NULL) {\n    fprintf(stderr, "Error opening the output file.\\n");\n    return 1;\n}\n  gdImagePngEx(im, outputFile, 9);\n      fclose(outputFile);\n      gdImageDestroy(im);\n      return 0;\n  }\n \n \n', 'tags': '', 'url': 'w7.html'}, {'title': 'w11', 'text': '\n', 'tags': '', 'url': 'w11.html'}, {'title': 'w12', 'text': '#include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nint main() {\n    int width = 800;\n    int height = 600;\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    FILE *outputFile = fopen("hellogd.png", "wb");\n    if (outputFile == NULL) {\n\nfprintf(stderr, "Error opening the output file.\\n");\n\nreturn 1;\n    }\n\n    int red = gdImageColorAllocate(img, 255, 0, 0);\n    int blue = gdImageColorAllocate(img, 0, 0, 255);\n    int black = gdImageColorAllocate(img, 0, 0, 0);\n    int white = gdImageColorAllocate(img, 255, 255, 255);\n    // 長方形塗色\n    gdImageFilledRectangle(img, 0, 0, width, height, white);\n    gdImageFilledRectangle(img, 0, 0, (int)width/4, (int)height/4, blue);\n    // 橢圓形塗色\n    gdImageFilledEllipse(img, (int)width*3/4, (int)height/4, (int)width/4, (int)width/4, red);\n    // 橢圓形畫線\n    gdImageEllipse(img, (int)width*3/4, (int)height*3/4, (int)width/4, (int)width/4, red);\n    // 畫直線\n    gdImageLine(img, (int)width/2, (int)height/2, (int)width/2, (int)height/2 + 100, blue);\n\n    // 多邊形畫線\n    gdPoint points[4];\n    points[0].x = (int)width/4;\n    points[0].y = (int)height*3/4;\n    points[1].x = points[0].x + 100;\n    points[1].y = points[0].y;\n    points[2].x = points[1].x;\n    points[2].y = points[1].y + 100;\n    points[3].x = points[2].x - 100;\n    points[3].y = points[2].y;\n    gdImagePolygon(img, points, 4, black);\n\n    // 多邊形塗色\n    gdPoint points2[4];\n    points2[0].x = (int)width/3;\n    points2[0].y = (int)height/2;\n    points2[1].x = points2[0].x + 100;\n    points2[1].y = points2[0].y;\n    points2[2].x = points2[1].x;\n    points2[2].y = points2[1].y + 100;\n    points2[3].x = points2[2].x - 150;\n    points2[3].y = points2[2].y;\n    gdImageFilledPolygon(img, points2, 4, red);\n\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n} \n \n', 'tags': '', 'url': 'w12.html'}, {'title': 'w13', 'text': '// 包含標準輸出入程式庫的標頭文件\n#include <stdio.h>\n\n// 主函式\nint main() {\n    // Open a file to write displacement and velocity data\n    FILE *outputFile = fopen("motion_data.txt", "w");\n    if (!outputFile) {\n        fprintf(stderr, "Failed to create data file.\\n");\n        return 1;\n    }\n\n    // Simulate motion for 10 seconds and calculate displacement and velocity, while writing data to the file\n    double x = 0.2;  // Initial displacement\n    double v = 0.0;  // Initial velocity\n    double dt = 0.01; // Time step\n    double t = 0.0;  // Time\n\n    while (t <= 10.0) {\n        double acceleration = (-10.0 * x - 0.5 * v) / 1.0; // Modified system parameters here\n        v += acceleration * dt;\n        x += v * dt;\n\n        fprintf(outputFile, "%lf %lf %lf\\n", t, x, v);\n\n        t += dt;\n    }\n\n    // Close the data file\n    fclose(outputFile);\n\n    // Start a Gnuplot process using popen\n    FILE *gnuplotPipe = popen("gnuplot -persistent", "w");\n    if (!gnuplotPipe) {\n        fprintf(stderr, "Failed to start Gnuplot.\\n");\n        return 1;\n    }\n\n    // Use Gnuplot plotting commands, specify font and output as PNG\n    fprintf(gnuplotPipe, "set terminal pngcairo enhanced font \'default,10\' size 800,400\\n");\n    fprintf(gnuplotPipe, "set output \'./../images/motion_plot.png\'\\n");\n    fprintf(gnuplotPipe, "set title \'Displacement and Velocity vs. Time\'\\n");\n    fprintf(gnuplotPipe, "set xlabel \'Time (s)\'\\n");\n    fprintf(gnuplotPipe, "set ylabel \'Displacement (m)\'\\n");\n    fprintf(gnuplotPipe, "plot \'motion_data.txt\' using 1:2 with lines lw 2 title \'Displacement\', \\\n                             \'motion_data.txt\' using 1:3 with lines lw 2 title \'Velocity\'\\n");\n\n    // Close the Gnuplot process\n    fprintf(gnuplotPipe, "exit\\n");\n    pclose(gnuplotPipe);\n\n    return 0;\n} \n \n', 'tags': '', 'url': 'w13.html'}, {'title': 'w15', 'text': '畫線程式 \n #include <stdio.h>\n#include <gd.h>\n#include <math.h>\n\nvoid draw_exam_flag(gdImagePtr img);\nvoid draw_white_sun(gdImagePtr img, int center_x, int center_y, int sun_radius, int white, int red, int blue);\n\nint main() {\n    // width 3: height 2\n    int width = 1200;\n    int height = (int)(width*2.0 / 3.0);\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n    gdImageAlphaBlending(img, 0);\n\n    draw_exam_flag(img);\n\n    FILE *outputFile = fopen("./exam_flag.png", "wb");\n    if (outputFile == NULL) {\n        fprintf(stderr, "Error opening the output file.\\n");\n        return 1;\n    }\n    gdImagePngEx(img, outputFile, 9);\n    fclose(outputFile);\n    gdImageDestroy(img);\n    return 0;\n}\n\nvoid draw_exam_flag(gdImagePtr img) {\n    int width = gdImageSX(img);\n    int height = gdImageSY(img);\n    int red, white, blue;\n    int center_x = (int)(width/4);\n    int center_y = (int)(height/4);\n    int sun_radius = (int)(width/8);\n    int lineColor = gdImageColorAllocate(img, 255, 255, 255);\n\n  // 畫一條線\n    int x1 = 429;\n    int y1 = 125;\n    int x2 = 170;\n    int y2 = 274;\n\n    int x3 = 279;\n    int y3 = 165;\n    int x4 = 170;\n    int y4 = 274;\n\n    int x5 = 279;\n    int y5 = 165;\n    int x6 = 429;\n    int y6 = 125;\n  \n    // Colors for the flag\n    red = gdImageColorAllocate(img, 242, 0, 0); // Red color\n    white = gdImageColorAllocate(img, 255, 255, 255); // White stripes\n    blue = gdImageColorAllocate(img, 0, 41, 204); // Blue\n\n    // 繪製紅色矩形區域\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n\n    // 繪製藍色矩形區域\n    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n\n    gdImageLine(img, x1, y1, x2, y2, lineColor);\n\n    gdImageLine(img, x3, y3, x4, y4, lineColor);\n\n    gdImageLine(img, x5, y5, x6, y6, lineColor);\n\n    return 0;\n}\n \n \n \n 找交點程式 \n #include <stdio.h>\n\n#include <gd.h>\n\n#include <math.h>\n\n\n\nvoid draw_roc_flag(gdImagePtr img);\n\nvoid draw_white_sun(gdImagePtr img, int x, int y, int size, int color);\n\n\n\nint main() {\n\n    // width 3: height 2\n\n    int width = 1200;\n\n    // 國旗長寬比為 3:2\n\n    int height = (int)(width*2.0 / 3.0);\n\n\n\n    gdImagePtr img = gdImageCreateTrueColor(width, height);\n\n    gdImageAlphaBlending(img, 0);\n\n\n\n    draw_roc_flag(img);\n\n\n\n    FILE *outputFile = fopen("roc_flag_in_gd.png", "wb");\n\n    if (outputFile == NULL) {\n\n        fprintf(stderr, "Error opening the output file.\\n");\n\n        return 1;\n\n    }\n\n    gdImagePngEx(img, outputFile, 9);\n\n    fclose(outputFile);\n\n    gdImageDestroy(img);\n\n    return 0;\n\n}\n\n\n\nvoid draw_roc_flag(gdImagePtr img) {\n\n    int width = gdImageSX(img);\n\n    int height = gdImageSY(img);\n\n    int red, white, blue;\n\n    // 白日位於青天面積正中央, 因此中心點座標為長寬各 1/4 處\n\n    int center_x = (int)(width/4);\n\n    int center_y = (int)(height/4);\n\n    // gdImageFilledEllipse 需以長寬方向的 diameter 作圖\n\n    // 由於中央白日圓形的半徑為青天寬度的 1/8\n\n    // 因此中央白日圓形的直徑為青天寬度的 1/4, 也就是國旗寬度的 1/8\n\n    // 而且白日十二道光芒的外圍圓形其半徑也是國旗寬度的1/8\n\n    int sun_radius = (int)(width/8);\n\n    // 中央白日圓形的直徑等於十二道光芒外圍圓形的半徑\n\n    int white_circle_dia = sun_radius;\n\n    // 中央藍色圓形半徑為中央白日的 1又 2/15\n\n    int blue_circle_dia = white_circle_dia +  white_circle_dia*2/15;\n\n    // 根據 https://www.moi.gov.tw/cp.aspx?n=10621 訂定國旗三種顏色值\n\n    red = gdImageColorAllocate(img, 255, 0, 0); // 紅色\n\n    white = gdImageColorAllocate(img, 255, 255, 255); // 白色\n\n    blue = gdImageColorAllocate(img, 0, 0, 149); // 藍色\n\n    // 根據畫布大小塗上紅色長方形區域\n\n    gdImageFilledRectangle(img, 0, 0, width, height, red);\n\n    // 青天面積為整面國旗的 1/4, 也是採用長方形塗色\n\n    gdImageFilledRectangle(img, 0, 0, (int)(width/2.0), (int)(height/2.0), blue);\n\n  {int x1 = 429;\n\n   int y1 = 125;\n\n   int x2 = 279;\n\n   int y2 = 165;\n\n\n\n   // 畫一條線連接兩個點\n\n   gdImageLine(img, x1, y1, x2, y2, white);\n\n  }\n\n  {int x1 = 170;\n\n     int y1 = 274;\n\n     int x2 = 279;\n\n     int y2 = 165;\n\n\n\n     // 畫一條線連接兩個點\n\n     gdImageLine(img, x1, y1, x2, y2, white);\n\n  }\n\n  {\n\n    int x1 = 170;\n\n     int y1 = 274;\n\n     int x2 = 429;\n\n     int y2 = 125;\n\n\n\n     // 畫一條線連接兩個點\n\n     gdImageLine(img, x1, y1, x2, y2, white);\n\n  }\n\n  // 利用一個藍色大圓與白色小圓畫出藍色環狀\n\n  gdImageFilledEllipse(img, center_x, center_y, blue_circle_dia, blue_circle_dia, blue);\n\n  gdImageFilledEllipse(img, center_x, center_y, white_circle_dia, white_circle_dia, white);\n\n \n\n\n\n  // 定義座標結構\n\n  typedef struct {\n\n      double x;\n\n      double y;\n\n  } Point;\n\n\n\n  // 計算圓與線的交點\n\n  void circleLineIntersection(double h, double k, double r, double x1, double y1, double x2, double y2) {\n\n      // 直線斜率\n\n      double m = (y2 - y1) / (x2 - x1);\n\n\n\n      // 直線方程式中的常數項\n\n      double b = y1 - m * x1;\n\n\n\n      // 圓與直線交點的計算\n\n      double A = 1 + pow(m, 2);\n\n      double B = 2 * (m * b - m * k - h);\n\n      double C = pow(k, 2) - pow(r, 2) + pow(h, 2) - 2 * b * k + pow(b, 2);\n\n\n\n      // 判斷交點個數\n\n    double discriminant = pow(B, 2) - 4 * A * C;\n\n    if (discriminant > 0) {\n\n        double x_intersect1 = (-B + sqrt(discriminant)) / (2 * A);\n\n        double y_intersect1 = m * x_intersect1 + b;\n\n        printf("交點: (%.2f, %.2f)\\n", x_intersect1, y_intersect1);\n\n\n\n        double x_intersect2 = (-B - sqrt(discriminant)) / (2 * A);\n\n        double y_intersect2 = m * x_intersect2 + b;\n\n        printf("交點: (%.2f, %.2f)\\n", x_intersect2, y_intersect2);\n\n    } else if (discriminant == 0) {\n\n        double x_intersect = -B / (2 * A);\n\n        double y_intersect = m * x_intersect + b;\n\n        printf("交點: (%.2f, %.2f)\\n", x_intersect, y_intersect);\n\n    } else {\n\n        printf("No points.\\n");\n\n    }\n\n\n\n  }\n\n\n\n\n\n      // 圓的參數\n\n      double circle_x = (int)(width/4); // 圓心 x 座標\n\n      double circle_y = (int)(height/4); // 圓心 y 座標\n\n      double radius = white_circle_dia +  white_circle_dia*2/15;   // 圓半徑\n\n  \n\n      // 兩點座標\n\n      \n\n\n\n  \n\n  double x3 = 170;\n\n  double y3 = 274;\n\n  double x4 = 279;\n\n  double y4 = 165;\n\n\n\n  circleLineIntersection(circle_x, circle_y, radius, x4, y4, x3, y3);\n\n  \n\n    \n\n  double x5 = 279;\n\n  double y5 = 165;\n\n  double x6 = 429;\n\n  double y6 = 125;\n\n\n\n  circleLineIntersection(circle_x, circle_y, radius, x6, y6, x5, y5);\n\n  \n\n\n\n  \n\n  \n\n  \n\n  \n\n  } \n \n', 'tags': '', 'url': 'w15.html'}, {'title': 'ANSIC', 'text': '檢查給定的數字是否為醜數 \n # include <stdio.h>\n# include <string.h>\n\nint main()\n{\nint n,x=0;\n  printf("\\n\\n Check whether a given number is an ugly number:\\n");\n  printf("----------------------------------------------------\\n");\n  printf("Input an integer number: ");\n  scanf("%d",&n);\n\n      if (n <= 0) {  \n            printf("Input a correct number.");  \n        }\n       while (n != 1) \n       {  \n            if (n % 5 == 0) \n            {  \n                n /= 5;  \n            } \n            else if (n % 3 == 0) \n            {  \n                n /= 3;  \n            } \n            else if (n % 2 == 0) \n            {  \n                n /= 2;  \n            } \n            else \n            {  \n                printf("It is not an ugly number.\\n"); \n                x = 1;  \n                break;  \n            }  \n        } \n\t\t        if (x==0)\n\t\t        { \n                printf("It is an ugly number.\\n");\n                }\n}\n \n \n \n 列印您的姓名、出生日期和手機號碼 \n #include <stdio.h>\n\nint main()  \n{\n    // 列印姓名\n    printf("Name   : Alexandra Abramov\\n"); \n    \n    // 列印出生日期\n    printf("DOB    : July 14, 1975\\n"); \n    \n    // 列印手機號碼\n    printf("Mobile : 99-9999999999\\n"); \n    \n    // 表示執行成功\n    return(0); \n}\n \n \n \n 反轉給定整數的數字 \n #include <stdio.h>\nint reverse(int n) {\n    int d, y = 0;\n    while (n) {\n        d = n % 10;\n        if ((n > 0 && y > (0x7fffffff - d) / 10) ||\n            (n < 0 && y < ((signed)0x80000000 - d) / 10)) {\n            return 0;  \n        }\n        y = y * 10 + d;\n        n = n / 10;\n    }\n    return y;  \n}\n\nint main(void)\n{\n    int i = 123;\n    printf("Original integer: %d  ",i);\n    printf("\\nReverse integer: %d  ",reverse(i));\n    i = 208478933;\n    printf("\\nOriginal integer: %d  ",i);\n    printf("\\nReverse integer: %d  ",reverse(i));\n    i = -73634;\n    printf("\\nOriginal integer: %d  ",i);\n    printf("\\nReverse integer: %d  ",reverse(i));\n    return 0;\n}\n \n \n \n 將字串轉換為無符號長整型 \n #include<stdio.h>\n#include<stdlib.h>\n\nint main ()\n{\nchar buffer[123]; //定義一個字元數組“buffer”來儲存使用者輸入\nunsigned long ul; // 定義一個unsigned long變數\'ul\'來儲存轉換後的值\n\n    // 列印一則訊息，要求使用者輸入\nprintf ("\\nInput an unsigned number: ");\n\n    // 從標準輸入讀取使用者輸入並將其儲存在“緩衝區”中\nfgets (buffer,123,stdin);\n\n    // 使用基數 0 將「buffer」中的字串轉換為無符號長整數（自動偵測）\nul = strtoul (buffer,NULL,0);\n\n    // 列印轉換後的值\nprintf ("Output: %lu\\n\\n",ul);\n\nreturn 0; // 表明程式執行成功\n}\n \n \n \n 將字串轉換為雙精度 \n #include<stdio.h>      // 包括標準輸入/輸出頭檔。\n#include<stdlib.h>     // 包含標準庫頭檔。\n\nint main ()          // 主函數開始。\n{\nchar input[] = "8.0 2.0";  // 聲明一個字元數組“input”並用“8.0 2.0”對其進行初始化。\nchar * ptr_end;           //聲明一個指向字元“ptr_end”的指標。\n\ndouble x, y;              // 聲明兩個雙精確度變數“x”和“y”。\n\n    x = strtod (input,&ptr_end);   //將“input”的第一部分轉換為雙精度型，儲存在“x”中，並更新“ptr_end”。\n    y = strtod (ptr_end,NULL);     // 將“input”的剩餘部分轉換為雙精度型，儲存在“y”中。\n\nprintf ("\\nOutput= %.2lf\\n\\n", x/y);   // 印出 x/y 的結果，保留兩位小數。\nreturn 0;   // 返回0表示程式執行成功。\n}   // 主函數結束。\n \n \n \n 產生一個隨機數 \n #include<stdio.h>     // 包括標準輸入/輸出頭檔。\n#include<stdlib.h>    // 包含標準庫頭檔。\n#include<time.h>      // 包含用於產生隨機數的時間頭檔。\nint main ()           // 主函數開始。\n{\nint number, input;   // 宣告兩個整數變數「number」和「input」。\nsrand ( time(NULL) );   // 使用當前時間初始化隨機種子。\n\nnumber = rand() % 10 + 1;   // 產生 1 到 10 之間的隨機數並將其儲存在「number」中。\n\ndo {   // do-while 循環的開始。\nprintf ("\\nGuess the number (1 to 10): ");   // 列印一則訊息，提示使用者猜測數字。\nscanf ("%d",&input);    // 讀取用戶的輸入並將其儲存在“input”中。\n\nif (number > input)   // 如果隨機數大於使用者輸入。\nprintf ("The number is higher\\n");   // 列印一條訊息，表示該數字更大。\n\n    } while (number!=input);   // 只要使用者的輸入不等於隨機數就繼續循環。\n\nprintf ("That is correct!\\n\\n");   // 列印一條訊息，表示用戶猜對了。\n\nreturn 0;   // 返回0表示程式執行成功。\n}   // 主函數結束。\n \n \n 簡單的函數結構 \n #include <stdio.h>\n\n    int sum (int, int);//函數聲明\n    int main (void)\n    {\n        int total;\n\t\tprintf("\\n\\n Function : a simple structure of function :\\n");\n\t\tprintf("------------------------------------------------\\n");\t\n        total = sum (5, 6);//函數呼叫\n        printf ("The total is :  %d\\n", total);\n        return 0;\n    }\n    \n    int sum (int a, int b) //函數定義\n    {\n\t    int s;\n\t\ts=a+b;\n        return s; //函數傳回一個值\n    }\n \n \n \n 顯示前 10 個自然數 \n #include <stdio.h>  // 包括標準輸入/輸出頭檔。\nint main() {\n    int i;\n\n    // 列印一條訊息，表示程式的意圖\n    printf("The first 10 natural numbers are:\\n");\n\n    // 循環遍歷前 10 個自然數並列印每個自然數\n    for (i = 1; i <= 10; i++) {\n        printf("%d ", i);\n    }\n\n    // 返回0表示執行成功\n    return 0;\n} \n \n \n 列印前 50 個自然數 \n #include<stdio.h>\nint  numPrint(int);\nint main()\n{\n    int n = 1;\n\tprintf("\\n\\n Recursion : print first 50 natural numbers :\\n");\n\tprintf("-------------------------------------------------\\n"); \n\tprintf(" The natural numbers are :");\n    numPrint(n);\n    printf("\\n\\n");\n    return 0;\n}\nint numPrint(int n)\n{\n    if(n<=50)\n    {\n         printf(" %d ",n);\n         numPrint(n+1);\n    }\n}\n \n \n \n 檢查兩個整數是否相等 \n #include <stdio.h>   // 包括標準輸入/輸出頭檔。\nvoid main()\n{\n    int int1, int2;   // 宣告兩個整數變數“int1”和“int2”。\n\n    printf("Input the values for Number1 and Number2 : ");   // 提示使用者輸入 Number1 和 Number2 的值。\n    scanf("%d %d", &int1, &int2);   // 讀取使用者的輸入並將其儲存在“int1”和“int2”中。\n    if (int1 == int2)   // 檢查 Number1 是否等於 Number2。\n        printf("Number1 and Number2 are equal\\n");   // 如果 Number1 和 Number2 相等，則列印一則訊息。\n    else\n        printf("Number1 and Number2 are not equal\\n");   //如果 Number1 和 Number2 不相等，則列印一則訊息。\n} \n \n \n 刪除字串中的所有空格 \n #include <stdio.h>\n\n#include <string.h>\n\n#include <ctype.h>\n\n// 移除字串中的空白字符，同時使用回調函數進行額外的修改\nvoid remove_whitespace(char *str, void (*modify)(char *)) {\n    int i, j = 0;\n    for (i = 0; str[i] != \'\\0\'; i++) {\n        if (!isspace(str[i])) {\n            str[j] = str[i];\n            j++;\n        } else {\n            modify(&str[i]);\n        }\n    }\n    str[j] = \'\\0\';\n}\n\n// 將空白字符替換為 \'\\0\' 的回調函數\nvoid remove_space(char *ch) {\n    *ch = \'\\0\';\n}\n\nint main() {\n    char str[100];\n    printf("輸入一個字串：");\n    fgets(str, sizeof(str), stdin);\n    str[strcspn(str, "\\n")] = \'\\0\'; // 移除換行符號\n    printf("原始字串：%s\\n", str);\n\n    // 使用回調函數移除空白字符\n    remove_whitespace(str, remove_space);\n\n    printf("沒有空白字符的字串：%s\\n", str);\n\n    return 0;\n}\n \n \n', 'tags': '', 'url': 'ANSIC.html'}, {'title': 'c_ex', 'text': '#include <stdio.h>\n\nint main() {\n    char ch;\n\n    printf("Input a char: ");\n    scanf("%c", &ch);\n\n    if (ch == \'a\') {\n        printf("You pressed \'a\'\\n");\n    }\n\n    return 0;\n} \n \n \n #include <stdio.h>\nvoid main()\n{\nint i, j;\nj = 10; /* 迴圈外先設定初值 */\nfor ( i = 0; i < 6; i++ )\n{\nprintf( "i = %d, ", i );\nprintf( "j = %d \\n", j );\nj++; /* 迴圈後加上變更運算式 */\n}\n} \n \n \n #include <stdio.h>\nint main()\n{\n/* 印出 Hello World! Bye Bye */\nprintf("Hello World! "); printf("Bye "); printf("Bye");\nreturn 0;\n}\n \n \n \n #include <stdio.h>\nint main()\n{\nint a = 1;\nint A = 8;\nint b = 2, c;\nc = A - a + b;\n/* 輸出 a, A, b, c 到螢幕 */\nprintf( "a = %d, A = %d, b = %d, c = %d ", a, A, b, c );\nreturn 0;\n} \n \n \n #include <stdio.h>\nint main()\n{\nchar x, y;\nx = \'a\';\ny = (char)97;\n/* 輸出 x, y, x, 最後一個是以 ASCII 值顯示 y */\nprintf( " x = %c, y = %c, ASCII of y = %d", x, y, y );\nreturn 0;\n} \n \n \n #include<stdio.h>\nint main()\n{\nint a,b;\na = 10; b = 3;\nprintf( "%d \\n", a * b );\nprintf( "%d \\n", a / b );\nprintf( "%d \\n", a + b );\nprintf( "%d \\n", a - b );\nprintf( "%d \\n", a % b );\nreturn 0;\n}\n \n \n \n #include <stdio.h>\nint main()\n{\nint a = 10, b = 5;\nprintf( " a == b is %d \\n", a == b );\nprintf( " a > b is %d \\n", a > b );\nprintf( " a < b is %d \\n", a < b );\nprintf( " a >= b is %d \\n", a >= b );\nprintf( " a <= b is %d \\n", a <= b );\nprintf( " a != b is %d \\n", a != b );\nprintf( "\\n" );\nb = 10;\nprintf( " a == b is %d \\n", a == b );\nprintf( " a > b is %d \\n", a > b );\nprintf( " a < b is %d \\n", a < b );\nprintf( " a >= b is %d \\n", a >= b );\nprintf( " a <= b is %d \\n", a <= b );\nprintf( " a != b is %d \\n", a != b );\nreturn 0;\n} \n \n \n #include<stdio.h>\nvoid main()\n{\nint a,b;\na = 15;\nb = 1;\nprintf("%d \\n", a | b ); /* a OR b */\nprintf("%d \\n", a & b ); /* a AND b */\nprintf("%d \\n", a ^ b ); /* a XOR b */\nprintf("%d \\n", a << 1 ); /* a 位元左移 1 位 */\nprintf("%d \\n", a >> 1 ); /* a 位元右移一位 */\nprintf("%d \\n", ~a ); /* A 的補數運算 */\n} \n \n \n #include <stdio.h>\nvoid main()\n{\nint a;\na = 3;\nprintf("%d\\n", !a );\na = 0;\nprintf("%d\\n", !a );\n} \n \n \n #include <stdio.h>\nvoid main()\n{\nchar c;\nprintf( "Input a char:" );\nscanf( "%c", &c );\nswitch( c )\n{\ncase \'a\':\nprintf(" you pressed a ");\nbreak;\ncase \'b\':\nprintf(" you pressed b ");\nbreak;\ncase \'c\':\nprintf(" you pressed c ");\nbreak;\ndefault:\nprintf(" not a, b, c ");\nbreak;\n}\n} \n \n \n #include <stdio.h>\n/* 讀取並顯示一個數字 */\nint main () {\n char c;\n printf("Enter character: ");\n c = getchar(); /* 讀取其中的字符 */\n printf("Character entered: ");\n putchar(c); /* 寫出這個字符 */\n return(0);\n} \n \n \n #define _CRT_SECURE_NO_WARNINGS\n#include<stdio.h>\n/* 演示一個for循環 */\nmain()\n{\n float this_is_a_number, total;\n int i;\n total = 0;\n /* forloop 迴圈 10 次 */\n for (i = 0;i < 10;i++)\n {\n printf("Please enter a number:\\n ");\n scanf("%f", &this_is_a_number); /* 讀取數字 */\n total = total + this_is_a_number;\n }\n printf("Total Sum is = %f\\n", total);\n} \n \n \n #include <stdio.h>\n/* if 運算範例 */\nint main()\n{\n int this_is_a_number;\n printf( "Please enter an integer between 1 and 10:\\n " );\n scanf( "%d", &this_is_a_number );\n if (this_is_a_number <6)\n printf( "This number is less than 6;\\n " );\n printf( "Please enter an integer between 10 and 20:\\n " );\n scanf( "%d", &this_is_a_number );\n if (this_is_a_number <16)\n printf( "This number is less than 16\\n " );\n else\n printf( "This number is greater than 15\\n " );\n return 0;\n} \n \n \n #define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n/* if then else if 操作的範例 */\nint main()\n{\n int this_is_a_number;\n printf("Please enter an integer between 1 and 10:\\n ");\n scanf("%d", &this_is_a_number);\n if (this_is_a_number < 6)\n printf("This number is less than 6;\\n ");\n printf("Please enter an integer between 10 and 20:\\n ");\n scanf("%d", &this_is_a_number);\n if (this_is_a_number < 16)\n {\n printf("This number is less than 16\\n ");\n }\n else if (this_is_a_number == 20)\n {\n printf("This number is 20\\n ");\n }\n else\n {\n printf("This number is greater than 15\\n ");\n }\n return 0;\n} \n \n \n /* 返回答案的函數 */\n/* 尋找學校一年中得分最高的學生 */\n#include <stdio.h>\ndouble getmarks(double pupils[]);\nint main()\n{\n double pupil;\n /* 帶有班級標記的數組已預設在主要部分中\n程式 */\n double marks[] = { 10.6, 23.7, 67.9, 93.0, 64.2, 33.8 ,57.5 ,82.2\n,50.7 ,45.7 };\n /* Call function getmarks. The function returns the max marks which\nis then stored in pupil */\n pupil = getmarks(marks);\n printf("Max mark is = %f", pupil);\n return 0;\n}\ndouble getmarks(double pupils[])\n{\n int i;\n double highest;\n highest = 0;\n /* 依序檢查所有學生並儲存最高分 */\n for (i = 0; i < 6; ++i)\n {\n if (highest < pupils[i])\n highest = pupils[i];\n }\n return highest; /* 傳回函數所在位置的最高值\n被稱為*/\n} \n \n \n /* 這是我的第一個C程序*/\nint main()\n{\n printf("My first program\\n");\n return(0);\n} \n \n #define _CRT_SECURE_NO_WARNINGS\n#include<stdio.h>\nint main()\n{\n int this_is_a_number1, this_is_a_number2, total;\n printf("Please enter an integer number:\\n ");\n scanf("%d", &this_is_a_number1); /* read number in */\n printf("You entered %d\\n", this_is_a_number1);\n printf("Please enter another number: \\n");\n scanf("%d", &this_is_a_number2); /* read number in */\n printf("You entered %d\\n", this_is_a_number2);\n total = this_is_a_number1 + this_is_a_number2;/* add two numbers */\n printf("total is %d\\n", total);\n return 0;\n} \n \n \n #define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n/* 兩個浮點數相乘 */\nint main()\n{\n float this_is_a_number1, this_is_a_number2, total;\n printf("Please enter a number:\\n ");\n scanf("%f", &this_is_a_number1); /* 讀取數字 */\n printf("You entered %f\\n", this_is_a_number1);\n printf("Please enter another number: \\n");\n scanf("%f", &this_is_a_number2); /* 讀取數字 */\n printf("You entered %f\\n", this_is_a_number2);\n total = this_is_a_number1 * this_is_a_number2;/* 將數字相乘 */\n printf("product is %f\\n", total);\n return 0;\n} \n \n \n #define _CRT_SECURE_NO_WARNINGS\n#include <stdio.h>\n/* 兩個浮點數相除 */\nint main()\n{\n float this_is_a_number1, this_is_a_number2, total;\n printf("Please enter a number: \\n");\n scanf("%f", &this_is_a_number1); /* 讀取數字 */\n printf("You entered %f\\n", this_is_a_number1);\n printf("Please enter another number:\\n ");\n scanf("%f", &this_is_a_number2); /* 讀取數字 */\n printf("You entered %f\\n", this_is_a_number2);\n total = this_is_a_number1 / this_is_a_number2;/* 除以數字 */\n printf("quotient is %f\\n", total);\n return 0;\n} \n \n \n #define _CRT_SECURE_NO_WARNINGS\n#include<stdio.h>\n/* 顯示數組使用的程序 */\nint main()\n{\n int arr1[8];/* 定義一個 8 個整數的陣列 */\n int i;\n printf("enter 8 integer numbers\\n");\n for (i = 0;i < 8;i++)\n {\n scanf("%d", &arr1[i]);/* 讀入 arr1[i]*/\n }\n printf("Your 8 numbers are \\n");\n for (i = 0;i < 8;i++)\n {\n printf("%d ", arr1[i]);\n }\n printf("\\n");\n} \n', 'tags': '', 'url': 'c_ex.html'}, {'title': 'Brython', 'text': 'https://en.wikipedia.org/wiki/Python_(programming_language) \n Examples: \n https://gist.github.com/mdecycu/d9082d678096bd58378d6afe2c7fa05d \n https://www.geeksforgeeks.org/python-programming-examples/ \n https://www.programiz.com/python-programming/examples \n https://www.freecodecamp.org/news/python-code-examples-sample-script-coding-tutorial-for-beginners/ \n Python Tutorial: \n https://docs.python.org/3/tutorial/ \n An informal introduction to Python \n Indentation (Python 採 4 個 Spaces 縮排, 以界定執行範圍) \n Variables ( Python Keywords ) \n Comments (# 單行註解, 三個單引號或三個雙引號標註多行註解) \n Numbers  (整數 int(), 浮點數 float()) \n Strings  (字串) \n print (Python 內建函式,  print()  函式) \n Python control flow tools \n for \n if \n range \n open \n read \n lists \n tuples \n dictionaries \n functions \n try ... except \n break \n pass \n classes \n 這個頁面 demo 如何在同一頁面下納入多個線上 Ace 編輯器與執行按鈕 ( practice_html.txt  動態頁面超文件). \n practice_html.txt  動態頁面超文件應該可以在啟動 Brython 時, 設定將 .py 檔案放入 downloads/py 目錄中引用. \n 亦即將所有對應的 html 也使用 Brython 產生, 然後寫為  class  後, 在範例導入時透過  instance  引用. \n <!-- 啟動 Brython -->\n<script>\nwindow.onload=function(){\nbrython({debug:1, pythonpath:[\'./../cmsimde/static/\',\'./../downloads/py/\']});\n}\n</script> \n 從 1 累加到 100: \n 1 add to 100 \n 將 iterable 與 iterator  相關說明 , 利用 Brython 與 Ace Editor 整理在這個頁面. \n  導入 brython 程式庫  \n \n \n \n \n  啟動 Brython  \n \n \n \n  導入 FileSaver 與 filereader  \n \n \n \n \n  導入 ace  \n \n \n \n \n \n \n  導入 gearUtils-0.9.js Cango 齒輪繪圖程式庫  \n \n \n \n \n \n \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src1"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n \n \n \n  add 1 to 100 開始  \n \n \n  add 1 to 100 結束 \n  editor1 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor1 結束   ##########################################  \n 從 1 累加到 100 part2: \n 1 add to 100 cango_three_gears BSnake AI Tetris Rotating Block \n  請注意, 這裡使用 Javascript 將 localStorage["kw_py_src2"] 中存在近端瀏覽器的程式碼, 由使用者決定存檔名稱 \n \n \n \n  add 1 to 100 part2 開始  \n \n \n  add 1 to 100 part2 結束 \n  editor2 開始  \n  用來顯示程式碼的 editor 區域  \n \n  以下的表單與按鈕與前面的 Javascript doSave 函式以及 FileSaver.min.js 互相配合  \n  存擋表單開始  \n Filename:  .py   \n  存擋表單結束  \n \n  執行與清除按鈕開始  \n Run   Output   清除輸出區 清除繪圖區 Reload \n  執行與清除按鈕結束  \n \n  程式執行 ouput 區  \n \n  Brython 程式執行的結果, 都以 brython_div1 作為切入位置  \n \n  editor2 結束  \n \n \n', 'tags': '', 'url': 'Brython.html'}]};